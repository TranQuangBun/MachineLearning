import streamlit as st
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression, LinearRegression
from sklearn.neighbors import KNeighborsClassifier, KNeighborsRegressor
from sklearn.tree import DecisionTreeClassifier, DecisionTreeRegressor
from sklearn.ensemble import RandomForestClassifier, RandomForestRegressor
from sklearn.metrics import confusion_matrix, accuracy_score
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import accuracy_score, mean_squared_error, r2_score
from sklearn.tree import export_graphviz
import graphviz
import pydotplus
import pydot
import seaborn as sns
from io import StringIO

import matplotlib.pyplot as plt
import numpy as np
from streamlit_option_menu import option_menu

import preprocess

# Function to convert categorical features to numerical
def convert_to_number(df, column_name):
    df[column_name] = pd.factorize(df[column_name])[0]
    return df


# plot
def display_plot(y_test, y_pred, model_choice):
    fig, ax = plt.subplots(figsize=(6, 4))
    sns.scatterplot(x=y_test, y=y_pred, ax=ax)
    ax.set_xlabel("Actual Values")
    ax.set_ylabel("Predicted Values")
    ax.set_title(f"{model_choice}")
    st.pyplot(fig)


# Main function to render Streamlit app
def main():
    st.set_page_config(page_title="·ª®ng d·ª•ng ph√¢n t√≠ch d·ªØ li·ªáu", layout="wide")

    st.title(":green[·ª®ng d·ª•ng ph√¢n t√≠ch d·ªØ li·ªáu üìÅ]")

    with st.sidebar:
        st.image("logo.png", use_column_width=True)
        st.title(":green[·ª®ng d·ª•ng ph√¢n t√≠ch c·ªßa Nh√≥m 3]")
        st.header("T·∫£i l√™n file CSV ƒë·ªÉ b·∫Øt ƒë·∫ßu ph√¢n t√≠ch üëá")
        uploaded_file = st.file_uploader("", type="csv")

    if uploaded_file is not None:
        df = pd.read_csv(uploaded_file, encoding='ISO-8859-1')
        st.write("T√™n file:", uploaded_file.name)
        col1, col2 = st.columns(2)
        with col1:
            st.write("Th√¥ng tin d·ªØ li·ªáu:", df.describe())
            st.write("K√≠ch th∆∞·ªõc d·ªØ li·ªáu:", df.shape)
        with col2:
            # Show the dataframe
            st.write("D·ªØ li·ªáu:")
            st.dataframe(df)

        st.markdown("""---""")

        st.title(':green[Danh s√°ch c√°c lo·∫°i bi·∫øn]üìã ')
        with st.expander("C√ÅC LO·∫†I BI·∫æN "):
            marks1, marks2, marks3 = st.columns(3, gap='large')
            with marks1:
                st.info('Bi·∫øn s·ªë ', icon="üî¢")
                numerical_vars = df.select_dtypes(include='number').columns
                st.write(numerical_vars)
            with marks2:
                st.info('Bi·∫øn ph√¢n lo·∫°i', icon="üî°")
                categorical_vars = df.select_dtypes(include='object').columns
                st.write(categorical_vars)
            with marks3:
                st.info('Gi√° tr·ªã r·ªóng', icon="‚õî")
                st.write(df.isnull().sum())

        st.markdown("""---""")

        st.title(':red[Ti·ªÅn x·ª≠ l√Ω d·ªØ li·ªáu]  üîß')
        cot1,cot2,cot3 = st.columns(3)
        with cot1:
            st.info('X√ìA COLUMN')
            column_to_delete = st.selectbox("Ch·ªçn c·ªôt ƒë·ªÉ x√≥a", df.columns)
            if st.button("·∫§n v√†o ƒë√¢y ƒë·ªÉ x√≥a c·ªôt"):
                preprocess.delete_column(df, column_to_delete)
        with cot2:
            st.info('KI·ªÇM TRA V√Ä X·ª¨ L√ù DUPLICATE D·ªÆ LI·ªÜU')
            if st.button("X√≥a h√†ng tr√πng l·∫∑p"):
                preprocess.remove_duplicates(df)

        with cot3:
            st.info('CHUY·ªÇN ƒê·ªîI BI·∫æN PH√ÇN LO·∫†I TH√ÄNH BI·∫æN S·ªê')
            if st.button("Chuy·ªÉn ƒë·ªïi bi·∫øn ph√¢n lo·∫°i th√†nh s·ªë"):
                preprocess.convert_categorical_to_numeric(df)


        st.markdown("""---""")

        cot4, cot5 = st.columns(2)

        with cot4:
            st.info(':green[ƒê·ªîI T√äN COLUMN]')
            old_column_name = st.selectbox("Ch·ªçn c·ªôt c·∫ßn ƒë·ªïi t√™n", df.columns)
            new_column_name = st.text_input("Nh·∫≠p t√™n m·ªõi cho c·ªôt", value=old_column_name)
            if st.button("·∫§n v√†o ƒë√¢y ƒë·ªÉ  ƒë·ªïi t√™n c·ªôt"):
                preprocess.rename_column(df, old_column_name, new_column_name)

        with cot5:
            st.info(':green[X·ª¨ L√ù GI√Å TR·ªä B·ªä NULL]')
            column_to_replace = st.selectbox("Ch·ªçn c·ªôt ƒë·ªÉ thay th·∫ø gi√° tr·ªã null", df.columns)
            replace_method = st.selectbox("Ph∆∞∆°ng ph√°p thay th·∫ø",
                                          ["X√≥a", "Trung b√¨nh", "Trung v·ªã", "T√πy ch·ªânh"])
            if st.button("Thay th·∫ø gi√° tr·ªã null"):
                if replace_method == "X√≥a":
                    df.dropna(subset=[column_to_replace], inplace=True)
                    st.success(f"ƒê√£ x√≥a h√†ng ch·ª©a gi√° tr·ªã null trong c·ªôt '{column_to_replace}' th√†nh c√¥ng.")
                elif replace_method == "Trung b√¨nh":
                    preprocess.replace_null_with_mean(df, column_to_replace)
                elif replace_method == "Trung v·ªã":
                    preprocess.replace_null_with_median(df, column_to_replace)
                elif replace_method == "T√πy ch·ªânh":
                    custom_value = st.text_input("Nh·∫≠p gi√° tr·ªã t√πy ch·ªânh", value="")
                    preprocess.replace_null_with_custom_value(df, column_to_replace, custom_value)

        st.subheader("D·ªØ li·ªáu sau ch·ªânh s·ª≠a")
        st.dataframe(df)

        if st.button("üîΩ L∆∞u t·ªáp t·∫°i ƒë√¢y"):
            preprocess.save_file(df, "edited_files.csv")

        st.markdown("""---""")


        st.title(':red[X·ª≠ l√Ω d·ªØ li·ªáu ·ªü ƒë√¢y nh√©!]  üíñ')
        col3, col4 = st.columns(2)
        with col3:
            features = st.multiselect("Ch·ªçn bi·∫øn x:", df.columns)
        with col4:
            target = st.selectbox("Ch·ªçn bi·∫øn y:", df.columns)

        if features and target:
            # Convert categorical features to numerical
            df_copy = df.copy()
            for col in features:
                if df_copy[col].dtype == 'object':
                    df_copy = convert_to_number(df_copy, col)
            if df_copy[target].dtype == 'object':
                df_copy = convert_to_number(df_copy, target)

            # Model selection
            model_choice = st.selectbox("Ch·ªçn M√¥ H√¨nh:",
                                        ["H·ªìi Quy Logistic", "H·ªìi Quy Tuy·∫øn T√≠nh", "KNN", "Decision Tree",
                                         "Random Forest"])

            if st.button("Ch·∫°y M√¥ H√¨nh"):

                if model_choice == "H·ªìi Quy Logistic":
                    logistci_regression_model(st, df_copy, features, target, model_choice)
                elif model_choice == "H·ªìi Quy Tuy·∫øn T√≠nh":
                    linear_regression_model(st, df_copy, features, target, model_choice)
                elif model_choice == "KNN":
                    knn_model(st, df_copy, df, features, target, model_choice)
                elif model_choice == "Decision Tree":
                    decision_tree_model(st, df_copy, df, features, target, model_choice)
                elif model_choice == "Random Forest":
                    random_forest_model(st, df_copy, df, features, target, model_choice)

            # Plot options
            plot_type = st.selectbox("Ch·ªçn lo·∫°i bi·ªÉu ƒë·ªì:",
                                     ["Bi·ªÉu ƒê·ªì C·ªôt", "Bi·ªÉu ƒê·ªì ƒê∆∞·ªùng", "Bi·ªÉu ƒê·ªì Ph√¢n Ph·ªëi", "Bi·ªÉu ƒê·ªì H√¨nh Tr√≤n"])
            if st.button("Hi·ªÉn Th·ªã Bi·ªÉu ƒê·ªì"):

                left, right = st.columns(2)
                plot_title = f"{plot_type} - {features[0]} vs {target}"
                title_html = f"<h3 style='text-align: center; color: green;'>{plot_title}</h3>"
                with left:
                    fig, ax = plt.subplots(figsize=(12, 8))
                    st.markdown(title_html, unsafe_allow_html=True)

                    if plot_type == "Bi·ªÉu ƒê·ªì C·ªôt":
                        df.plot(kind='bar', x=features[0], y=target, ax=ax)
                    elif plot_type == "Bi·ªÉu ƒê·ªì ƒê∆∞·ªùng":
                        df.plot(kind='line', x=features[0], y=target, ax=ax)
                    elif plot_type == "Bi·ªÉu ƒê·ªì Ph√¢n Ph·ªëi":
                        df.plot(kind='scatter', x=features[0], y=target, ax=ax)
                    elif plot_type == "Bi·ªÉu ƒê·ªì H√¨nh Tr√≤n":
                        if df[target].dtype == "object":
                            df[target].value_counts().plot(kind='pie', autopct='%1.1f%%', ax=ax)
                        else:
                            df[features[0]].value_counts().plot(kind='pie', autopct='%1.1f%%', ax=ax)

                    st.pyplot(fig)


# logistic_regression
def logistci_regression_model(st, df, features, target, model_choice):
    X_train, X_test, y_train, y_test = train_test_split(df[features], df[target], test_size=0.2, random_state=42)
    model = LogisticRegression()
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    accuracy = accuracy_score(y_test, y_pred)
    cm = confusion_matrix(y_test, y_pred)
    st.write("Confusion Matrix:")
    st.write(cm)
    st.write(f"ƒê·ªô ch√≠nh x√°c c·ªßa m√¥ h√¨nh {model_choice}: {accuracy}")


# linear_regrssion
def linear_regression_model(st, df, features, target, model_choice):
    X_train, X_test, y_train, y_test = train_test_split(df[features], df[target], test_size=0.2, random_state=42)
    model = LinearRegression()
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    accuracy = model.score(X_test, y_test)

    st.write(f"ƒê·ªô ch√≠nh x√°c c·ªßa m√¥ h√¨nh {model_choice}: {accuracy}")
    # V·∫Ω bi·ªÉu ƒë·ªì t∆∞∆°ng quan gi·ªØa y_pred v√† y_train
    display_plot(y_test, y_pred, model_choice)


# knn
def knn_model(st, df_copy, df, features, target, model_choice):
    X_train, X_test, y_train, y_test = train_test_split(df_copy[features], df_copy[target], test_size=0.2,
                                                        random_state=42)
    model = KNeighborsClassifier(n_neighbors=5)
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    accuracy = accuracy_score(y_test, y_pred)
    cm = confusion_matrix(y_test, y_pred)

    plt.title("Confusion Matrix (KNN)")
    plt.figure(figsize=(10, 7))
    sns.heatmap(cm, annot=True)
    plt.xlabel('Predicted Label')
    plt.ylabel('True Label')

    st.pyplot(plt)
    st.success(f"ƒê·ªô ch√≠nh x√°c c·ªßa m√¥ h√¨nh {model_choice}: {accuracy}")


# decision tree
def decision_tree_model(st, df_copy, df, features, target, model_choice):
    if pd.api.types.is_numeric_dtype(df[target]):  # regression
        X_train, X_test, y_train, y_test = train_test_split(df_copy[features], df_copy[target], test_size=0.2,
                                                            random_state=42)
        model = DecisionTreeRegressor()
        model.fit(X_train, y_train)
        y_pred = model.predict(X_test)
        accuracy = model.score(X_test, y_test)
        display_plot(y_test, y_pred, model_choice)
    else:
        # Classification
        df_copy_1 = df.copy()
        for col in features:
            if df_copy_1[col].dtype == 'object':
                df_copy_1 = convert_to_number(df_copy_1, col)

        X_train, X_test, y_train, y_test = train_test_split(df_copy_1[features], df_copy_1[target], test_size=0.2,
                                                            random_state=42)
        model = DecisionTreeClassifier()
        model.fit(X_train, y_train)
        y_pred = model.predict(X_test)
        accuracy = accuracy_score(y_test, y_pred)
        cm = confusion_matrix(y_test, y_pred)
        st.write("Confusion Matrix:")
        st.write(cm)
        dot_data = StringIO()
        export_graphviz(model, out_file=dot_data, filled=True, rounded=True, special_characters=True,
                        feature_names=features, class_names=model.classes_)
        graph = pydotplus.graph_from_dot_data(dot_data.getvalue())
        st.graphviz_chart(graph.to_string())

    st.write(f"ƒê·ªô ch√≠nh x√°c c·ªßa m√¥ h√¨nh {model_choice}: {str(accuracy)}")


# random forest
def random_forest_model(st, df_copy, df, features, target, model_choice):
    if pd.api.types.is_numeric_dtype(df[target]):  # regression
        X_train, X_test, y_train, y_test = train_test_split(df_copy[features], df_copy[target], test_size=0.2,
                                                            random_state=42)
        model = RandomForestRegressor(n_estimators=100, random_state=42)
        model.fit(X_train, y_train)
        y_pred = model.predict(X_test)
        accuracy = model.score(X_test, y_test)
        display_plot(y_test, y_pred, model_choice)
    else:
        # Classification
        df_copy_1 = df.copy()
        for col in features:
            if df_copy_1[col].dtype == 'object':
                df_copy_1 = convert_to_number(df_copy_1, col)

        X_train, X_test, y_train, y_test = train_test_split(df_copy_1[features], df_copy_1[target], test_size=0.2,
                                                            random_state=42)
        model = RandomForestClassifier(n_estimators=100, random_state=42)
        model.fit(X_train, y_train)
        y_pred = model.predict(X_test)
        accuracy = accuracy_score(y_test, y_pred)
        cm = confusion_matrix(y_test, y_pred)
        st.write("Confusion Matrix:")
        st.write(cm)
    st.write(f"ƒê·ªô ch√≠nh x√°c c·ªßa m√¥ h√¨nh {model_choice}: {str(accuracy)}")


if __name__ == "__main__":
    main()